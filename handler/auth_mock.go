// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	google "golang.org/x/oauth2/google"
)

// MockGoogleService is a mock of GoogleService interface.
type MockGoogleService struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleServiceMockRecorder
}

// MockGoogleServiceMockRecorder is the mock recorder for MockGoogleService.
type MockGoogleServiceMockRecorder struct {
	mock *MockGoogleService
}

// NewMockGoogleService creates a new mock instance.
func NewMockGoogleService(ctrl *gomock.Controller) *MockGoogleService {
	mock := &MockGoogleService{ctrl: ctrl}
	mock.recorder = &MockGoogleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleService) EXPECT() *MockGoogleServiceMockRecorder {
	return m.recorder
}

// FindDefaultCredentials mocks base method.
func (m *MockGoogleService) FindDefaultCredentials(ctx context.Context, scopes ...string) (*google.Credentials, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindDefaultCredentials", varargs...)
	ret0, _ := ret[0].(*google.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDefaultCredentials indicates an expected call of FindDefaultCredentials.
func (mr *MockGoogleServiceMockRecorder) FindDefaultCredentials(ctx interface{}, scopes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDefaultCredentials", reflect.TypeOf((*MockGoogleService)(nil).FindDefaultCredentials), varargs...)
}
